---

- name: copy IPFS init script
  copy:
    src: ipfs/init.sh
    dest: '{{ mn_evo_services_path }}/ipfs/'
    mode: +rx

- name: check if IPFS swarm key is alrady generated
  stat:
    path: '{{ ipfs_swarm_key_path }}'
  register: ipfs_swarm_key_file
  when: inventory_hostname == groups.masternodes[0]

- import_tasks: read_swarm_key.yml
  when: inventory_hostname == groups.masternodes[0] and ipfs_swarm_key_file.stat.exists == True

- import_tasks: generate_swarm_key.yml
  when: inventory_hostname == groups.masternodes[0] and ipfs_swarm_key_file.stat.exists == False

- set_fact:
    ipfs_swarm_key: '{{ hostvars[groups.masternodes[0]].ipfs_swarm_key }}'
  when: inventory_hostname != groups.masternodes[0]

- include: get_bootstrap_peer_id.yml
  when: inventory_hostname == groups.masternodes[0] or inventory_hostname == groups.masternodes[1]

- set_fact:
    ipfs_swarm_peer: '{{ hostvars[groups.masternodes[1]].my_ipfs_swarm_peer }}'
  when: inventory_hostname == groups.masternodes[0]

- set_fact:
    ipfs_swarm_peer: '{{ hostvars[groups.masternodes[0]].my_ipfs_swarm_peer }}'
  when: inventory_hostname != groups.masternodes[0]

- name: persist swarm bootstrap peer and key in docker compose
  template:
    src: 'docker-compose.yml'
    dest: '{{ mn_evo_services_path }}/docker-compose.yml'
